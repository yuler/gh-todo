#!/usr/bin/env bash
set -eo pipefail
IFS=$'\n\t'

usage() {
    cat <<-EOF
Usage: gh todo

[GitHub CLI] extension for todo list manager via GitHub issues

Actions:
    init        Create \`todo\` repo
    home        Open \`issues\` in browser
    add         Add todo item
    edit        Open \`issue\` in browser
    done        Close \`issue\`
    list        Show todo list

Examples:
    gh todo add abc
EOF
}

version="0.2.3"
today=$(date +"%Y-%m-%d")
repo="$(gh config get -h github.com user)/todo"

if [ -n "$GH_TODO_REPO" ]; then
    repo="$GH_TODO_REPO"
fi

get_issue_id() {
    gh issue list --search "$today" --json "number" --jq ".[0].number" --repo $repo
}

init() {
    exec gh repo create --confirm --private $@ $repo
}

home() {
    gh issue list --web --repo $repo
}

add() {
    input="$1"
    issue_id=$(get_issue_id)
    if [[ -z $issue_id ]]; then
        exec gh issue create --title $today --body "- [ ] $input" --repo $repo
    else
        body=$(gh issue list --search "$today" --json "body" --jq ".[0].body" --repo $repo)
        body=$(echo -e "$body\n- [ ] $input")
        exec gh issue edit $issue_id --body "$body" --repo $repo
    fi
}

edit() {
    issue_id=$(get_issue_id)
    if [[ -z $issue_id ]]; then
        exec gh issue create --title $today --body "" --repo $repo
    fi
    exec gh issue view $issue_id --repo $repo --web
}

_done() {
    issue_id=$(get_issue_id)
    if [[ -z $issue_id ]]; then
        echo "No plans for today yet."
    else
        exec gh issue close $issue_id --repo $repo
    fi
}

list() {
    issue_id=$(get_issue_id)
    if [[ -z $issue_id ]]; then
        echo "No plans for today yet."
    else
        exec gh issue view $issue_id --repo $repo
    fi
}

# main
if [[ $# -eq 0 ]]; then
    list
    exit 0
fi

while [ $# -gt 0 ]; do
    case "$1" in
    --version)
        echo $version
        exit 0
        ;;
    --help)
        usage
        exit 0
        ;;
    init)
        shift
        init $@
        ;;
    home)
        shift
        home
        ;;
    add)
        if [[ -z "$2" ]]; then
            echo -n "[Enter]: "
            read -e -r input
        else
            shift
            input=$*
        fi
        add "$input"
        ;;
    edit)
        shift
        edit $@
        ;;
    done)
        shift
        _done $@
        ;;
    list)
        list
        ;;
    *)
        usage >&2
        exit 1
        ;;
    esac
    shift
done
